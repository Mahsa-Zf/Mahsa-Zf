{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project 3: GDP and life expectancy\n",
    "\n",
    "This is the project notebook for Part 3 of The Open University's _Learn to code for Data Analysis_ course.\n",
    "\n",
    "Richer countries can afford to invest more on healthcare, on work and road safety, and other measures that reduce mortality. On the other hand, richer countries may have less healthy lifestyles. Is there any relation between the wealth of a country and the life expectancy of its inhabitants?\n",
    "\n",
    "The following analysis checks whether there is any correlation between the total gross domestic product (GDP) of a country in 2013 and the life expectancy of people born in that country in 2013."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting the data\n",
    "\n",
    "Two datasets of the World Bank are considered. One dataset, available at <http://data.worldbank.org/indicator/NY.GDP.MKTP.CD>, lists the GDP of the world's countries in current US dollars, for various years. The use of a common currency allows us to compare GDP values across countries. The other dataset, available at <http://data.worldbank.org/indicator/SP.DYN.LE00.IN>, lists the life expectancy of the world's countries. The datasets were downloaded as CSV files in March 2016."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.simplefilter('ignore', FutureWarning)\n",
    "from pandas_datareader.wb import download\n",
    "from pandas import *\n",
    "YEAR = 2019\n",
    "GDP_INDICATOR = 'NY.GDP.MKTP.CD'\n",
    "gdpReset=download(indicator=GDP_INDICATOR, country='all', start=2019, end=2019).reset_index()\n",
    "#gdpReset = read_csv('WB GDP 2013.csv')\n",
    "LIFE_INDICATOR = 'SP.DYN.LE00.IN'\n",
    "lifeReset=download(indicator=LIFE_INDICATOR, country='all', start=2019, end=2019).reset_index()\n",
    "#lifeReset = read_csv('WB LE 2013.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cleaning the data\n",
    "\n",
    "Inspecting the data with `head()` and `tail()` shows that:\n",
    "\n",
    "1. the first 34 rows are aggregated data, for the Arab World, the Caribbean small states, and other country groups used by the World Bank;\n",
    "- GDP and life expectancy values are missing for some countries.\n",
    "\n",
    "The data is therefore cleaned by:\n",
    "1. removing the first 34 rows;\n",
    "- removing rows with unavailable values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdpCountries = gdpReset[49:].dropna()\n",
    "lifeCountries = lifeReset[49:].dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transforming the data\n",
    "\n",
    "The World Bank reports GDP in US dollars and cents. To make the data easier to read, the GDP is converted to millions of British pounds (the author's local currency) with the following auxiliary functions, using the average 2013 dollar-to-pound conversion rate provided by <http://www.ukforex.co.uk/forex-tools/historical-rate-tools/yearly-average-rates>. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>year</th>\n",
       "      <th>NY.GDP.MKTP.CD</th>\n",
       "      <th>GDP (£m)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2019</td>\n",
       "      <td>1.929110e+10</td>\n",
       "      <td>12328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2019</td>\n",
       "      <td>1.528661e+10</td>\n",
       "      <td>9769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>2019</td>\n",
       "      <td>1.711578e+11</td>\n",
       "      <td>109382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>American Samoa</td>\n",
       "      <td>2019</td>\n",
       "      <td>6.380000e+08</td>\n",
       "      <td>408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>Andorra</td>\n",
       "      <td>2019</td>\n",
       "      <td>3.155065e+09</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           country  year  NY.GDP.MKTP.CD  GDP (£m)\n",
       "49     Afghanistan  2019    1.929110e+10     12328\n",
       "50         Albania  2019    1.528661e+10      9769\n",
       "51         Algeria  2019    1.711578e+11    109382\n",
       "52  American Samoa  2019    6.380000e+08       408\n",
       "53         Andorra  2019    3.155065e+09      2016"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def roundToMillions (value):\n",
    "    return round(value / 1000000)\n",
    "\n",
    "def usdToGBP (usd):\n",
    "    return usd / 1.564768\n",
    "\n",
    "GDP = 'GDP (£m)'\n",
    "gdpCountries[GDP] = gdpCountries[GDP_INDICATOR].apply(usdToGBP).apply(roundToMillions)\n",
    "gdpCountries.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The unnecessary columns can be dropped."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "COUNTRY = 'country'\n",
    "headings = [COUNTRY, GDP]\n",
    "gdpClean = gdpCountries[headings]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The World Bank reports the life expectancy with several decimal places. After rounding, the original column is discarded."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>Life expectancy (years)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Albania</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Angola</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                country  Life expectancy (years)\n",
       "49          Afghanistan                       65\n",
       "50              Albania                       79\n",
       "51              Algeria                       77\n",
       "54               Angola                       61\n",
       "55  Antigua and Barbuda                       77"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LIFE = 'Life expectancy (years)'\n",
    "lifeCountries[LIFE] = lifeCountries[LIFE_INDICATOR].apply(round)\n",
    "headings = [COUNTRY, LIFE]\n",
    "lifeClean = lifeCountries[headings]\n",
    "lifeClean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Combining the data\n",
    "\n",
    "The tables are combined through an inner join on the common 'country' column. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>GDP (£m)</th>\n",
       "      <th>Life expectancy (years)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>12328</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>9769</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>109382</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Angola</td>\n",
       "      <td>57144</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>1062</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               country  GDP (£m)  Life expectancy (years)\n",
       "0          Afghanistan     12328                       65\n",
       "1              Albania      9769                       79\n",
       "2              Algeria    109382                       77\n",
       "3               Angola     57144                       61\n",
       "4  Antigua and Barbuda      1062                       77"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdpVsLife = merge(gdpClean, lifeClean, on=COUNTRY, how='inner')\n",
    "gdpVsLife.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating the correlation\n",
    "\n",
    "To measure if the life expectancy and the GDP grow together, the Spearman rank correlation coefficient is used. It is a number from -1 (perfect inverse rank correlation: if one indicator increases, the other decreases) to 1 (perfect direct rank correlation: if one indicator increases, so does the other), with 0 meaning there is no rank correlation. A perfect correlation doesn't imply any cause-effect relation between the two indicators. A p-value below 0.05 means the correlation is statistically significant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The correlation is 0.517534468613185\n",
      "It is statistically significant.\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import spearmanr\n",
    "\n",
    "gdpColumn = gdpVsLife[GDP]\n",
    "lifeColumn = gdpVsLife[LIFE]\n",
    "(correlation, pValue) = spearmanr(gdpColumn, lifeColumn)\n",
    "print('The correlation is', correlation)\n",
    "if pValue < 0.05:\n",
    "    print('It is statistically significant.')\n",
    "else:\n",
    "    print('It is not statistically significant.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The value shows a direct correlation, i.e. richer countries tend to have longer life expectancy, but it is not very strong."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Showing the data\n",
    "\n",
    "Measures of correlation can be misleading, so it is best to see the overall picture with a scatterplot. The GDP axis uses a logarithmic scale to better display the vast range of GDP values, from a few million to several billion (million of million) pounds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='GDP (£m)', ylabel='Life expectancy (years)'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "gdpVsLife.plot(x=GDP, y=LIFE, kind='scatter', grid=True,logx=True, figsize=(10, 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot shows there is no clear correlation: there are rich countries with low life expectancy, poor countries with high expectancy, and countries with around 10 thousand (10<sup>4</sup>) million pounds GDP have almost the full range of values, from below 50 to over 80 years. Towards the lower and higher end of GDP, the variation diminishes. Above 40 thousand million pounds of GDP (3rd tick mark to the right of 10<sup>4</sup>), most countries have an expectancy of 70 years or more, whilst below that threshold most countries' life expectancy is below 70 years. \n",
    "\n",
    "Comparing the 10 poorest countries and the 10 countries with the lowest life expectancy shows that total GDP is a rather crude measure. The population size should be taken into account for a more precise definiton of what 'poor' and 'rich' means. Furthermore, looking at the countries below, droughts and internal conflicts may also play a role in life expectancy. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>GDP (£m)</th>\n",
       "      <th>Life expectancy (years)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>Kiribati</td>\n",
       "      <td>124</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>Micronesia, Fed. Sts.</td>\n",
       "      <td>261</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>Sao Tome and Principe</td>\n",
       "      <td>273</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>Tonga</td>\n",
       "      <td>327</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>St. Vincent and the Grenadines</td>\n",
       "      <td>527</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>Samoa</td>\n",
       "      <td>545</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>Vanuatu</td>\n",
       "      <td>595</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Comoros</td>\n",
       "      <td>745</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>Grenada</td>\n",
       "      <td>774</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>Guinea-Bissau</td>\n",
       "      <td>920</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            country  GDP (£m)  Life expectancy (years)\n",
       "89                         Kiribati       124                       68\n",
       "112           Micronesia, Fed. Sts.       261                       68\n",
       "143           Sao Tome and Principe       273                       70\n",
       "168                           Tonga       327                       71\n",
       "158  St. Vincent and the Grenadines       527                       73\n",
       "142                           Samoa       545                       73\n",
       "180                         Vanuatu       595                       70\n",
       "37                          Comoros       745                       64\n",
       "66                          Grenada       774                       72\n",
       "70                    Guinea-Bissau       920                       58"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the 10 countries with lowest GDP\n",
    "gdpVsLife.sort_values(GDP).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>GDP (£m)</th>\n",
       "      <th>Life expectancy (years)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Central African Republic</td>\n",
       "      <td>1419</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Chad</td>\n",
       "      <td>7231</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>Lesotho</td>\n",
       "      <td>1512</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>Sierra Leone</td>\n",
       "      <td>2634</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>Nigeria</td>\n",
       "      <td>286381</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>Somalia</td>\n",
       "      <td>3158</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Cote d'Ivoire</td>\n",
       "      <td>37411</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>Guinea-Bissau</td>\n",
       "      <td>920</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Cameroon</td>\n",
       "      <td>24929</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>Mali</td>\n",
       "      <td>11044</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      country  GDP (£m)  Life expectancy (years)\n",
       "32   Central African Republic      1419                       53\n",
       "33                       Chad      7231                       54\n",
       "97                    Lesotho      1512                       54\n",
       "148              Sierra Leone      2634                       55\n",
       "125                   Nigeria    286381                       55\n",
       "153                   Somalia      3158                       57\n",
       "41              Cote d'Ivoire     37411                       58\n",
       "70              Guinea-Bissau       920                       58\n",
       "30                   Cameroon     24929                       59\n",
       "107                      Mali     11044                       59"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the 10 countries with lowest life expectancy\n",
    "gdpVsLife.sort_values(LIFE).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusions\n",
    "\n",
    "To sum up, there is no strong correlation between a country's wealth and the life expectancy of its inhabitants: there is often a wide variation of life expectancy for countries with similar GDP, countries with the lowest life expectancy are not the poorest countries, and countries with the highest expectancy are not the richest countries. Nevertheless there is some relationship, because the vast majority of countries with a life expectancy below 70 years is on the left half of the scatterplot.\n",
    "\n",
    "Using the [NY.GDP.PCAP.PP.CD](http://data.worldbank.org/indicator/NY.GDP.PCAP.PP.CD) indicator, GDP per capita in current 'international dollars', would make for a better like-for-like comparison between countries, because it would take population and purchasing power into account. Using more specific data, like expediture on health, could also lead to a better analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "cap_indctr='NY.GDP.PCAP.PP.CD'\n",
    "capita=download(indicator=cap_indctr, country='all', start=YEAR, end=YEAR,freq='A').reset_index()\n",
    "capita=capita[49:266].dropna().round()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>capitaPerPerson($)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2152.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Albania</td>\n",
       "      <td>14231.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>11997.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Angola</td>\n",
       "      <td>6952.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>22460.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                country  capitaPerPerson($)\n",
       "49          Afghanistan              2152.0\n",
       "50              Albania             14231.0\n",
       "51              Algeria             11997.0\n",
       "54               Angola              6952.0\n",
       "55  Antigua and Barbuda             22460.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cpp='capitaPerPerson($)'\n",
    "capita=capita.rename(columns={cap_indctr:cpp})\n",
    "capita=capita[[COUNTRY,cpp]]\n",
    "capita.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "cpp_life=merge(capita,lifeClean, on='country', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The correlation is 0.8645776591203944\n",
      "It is statistically significant.\n"
     ]
    }
   ],
   "source": [
    "(correlation, pValue) =spearmanr(cpp_life['capitaPerPerson($)'],cpp_life['Life expectancy (years)'])\n",
    "print('The correlation is', correlation)\n",
    "if pValue < 0.05:\n",
    "    print('It is statistically significant.')\n",
    "else:\n",
    "    print('It is not statistically significant.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='capitaPerPerson($)', ylabel='Life expectancy (years)'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cpp_life.plot(x='capitaPerPerson($)', y='Life expectancy (years)', kind='scatter', grid=True,logx=True, figsize=(10, 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>capitaPerPerson($)</th>\n",
       "      <th>Life expectancy (years)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>Ireland</td>\n",
       "      <td>89551.0</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>Qatar</td>\n",
       "      <td>93852.0</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>Singapore</td>\n",
       "      <td>102573.0</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>Luxembourg</td>\n",
       "      <td>120962.0</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>Macao SAR, China</td>\n",
       "      <td>132539.0</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              country  capitaPerPerson($)  Life expectancy (years)\n",
       "78            Ireland             89551.0                       82\n",
       "135             Qatar             93852.0                       80\n",
       "146         Singapore            102573.0                       83\n",
       "98         Luxembourg            120962.0                       82\n",
       "99   Macao SAR, China            132539.0                       84"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cpp_life.sort_values('capitaPerPerson($)').tail(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
